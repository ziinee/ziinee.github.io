---
layout: post
title: ≪읽기 좋은 자바스크립트 코딩 기법≫  
date: 2016-05-18 10:38 +0900
category: book
tags: javascript style
---


읽기 좋은 자바스크립트 코딩 기법
===
---
# part1 스타일 가이드라인

코드를 작성한 사람에 관계없이 코드를 일관성 있게 작성할 수 있도록 돕기 위함

* 코딩규칙
프로그래밍 관례와 디렉터리 구조, 주석

* 스타일 가이드라인
소스 코드의 레이아웃

* 유용한 툴
코드 품질 검증 툴 스타일 사이드 라인에 매우 유용하다.
	* JsLint
	* JSHint

## 1. 기본 포맷

### 1.1 들여쓰기

* 탭을 이용한 들여쓰기
  시스템 마다 탭의 크기를 다르게 표현하기 때문에 협업에 좋지 않다.

* 공백을 이용한 들여쓰기
  2개/3개/8개 공백 중 한 가지 방식을 이용하여 들여쓰기
  실무에서는 2개와 8개의 절충안으로 4개를 사용
  (에디터에서 탭키를 여러개의 공백으로 입력되도록 설정하여 사용)

### 1.2 문장종료

명시적으로 세미콜론을 사용한다.

### 1.3 줄 길이

줄 길이 최대 80자는 다른 언어에서도 많이 사용하는 코딩 규칙
* 자바 : 최대 줄 길이 80자, 주석 70자
* 안드로이드 : 최대 줄 길이 100자
* 파이썬 : 라인당 79자

### 1.4 줄 바꿈

최대 글자수에 도달하면 연산자 다음에 줄을 바꾸고 두단계 들여쓰기 한다.
if문 안의 문장은 줄 바꿈과 무관하게 한 단계 들여쓰기
변수를 다른 변수에 대입할 때 두번째 줄의 들여쓰기는 첫 번째 줄의 변수와 열을 맞춘다.

### 1.5 빈 줄 넣기

* 메서드 사이
* 메서드 내 지역 변수와 첫 번째 문장 사이
* 한 줄 또는 여러 줄 주석 전
* 가독성을 높이기 위해 메서드 내에서 논리적으로 구분되는 곳

### 1.6 이름 규칙

사용하는 언어의 표준 라이브러리에서 따르는 이름 규칙을 사용해야 한다.
대부분 낙타 표시법(camel casing)을 사용
소문자로 시작하고 새로운단어를 사용할 때마다 첫 문자는 대문자로 입력하는 방식

* 1.6.1 변수와 함수

  변수명은 낙타 표시법을 사용하여 명사로 시작
  함수명은 낙타 표시법을 사용하여 동사로 시작
  변수 이름만으로 데이터 타입을 알 수 있도록 만든다.
  의미 없는 변수명은 사용하지 않는다.
    * can : 불린 값을 반환하는 함수
    * has : 불린 값을 반환하는 함수
    * is : 불린 값을 반환하는 함수
    * get : 불린 이외의 값을 반환하는 함수
    * set : 값을 저장하기 위해 사용하는 함수

* 1.6.2 상수
  값이 변하는 변수와 초기 값이 설정되면 절대 변경 불가한 상수를 구분하려고 이름 규칙을 다르게 한다.
  상수는 모든 문자를 대문자로 쓰고, 단어가 바뀔 떄는 밑줄을 사용

* 1.6.3 생성자
  생성자는 파스칼 표기법(Pascal Case)을 사용한다.
  낙타 표기법과 같지만 첫 글자를 대문자로 시작한다.
  생성자는 타입의 인스턴스를 만드는 데 사용되므로 이름은 명사로 짓는다.
  생성자를 변수나 함수와 구분할 수 있다.

### 1.7 리터럴 값
* 1.7.1 문자열
  큰따옴표와 작은따옴표에 기능적 차이가 없고, 모두 사용가능
  자바 : 문자열에 큰 따옴표만 지원
  구글 : 작은따옴표 사용을 권한다.
  코어 스타일 가이드 : 문자열에 큰 따옴표 사용을 선호
  여러 줄에 결친 문자열을 사용하기 보다는 문자열을 여러 개로 나눠 합치는 방법이 낫다.

* 1.7.2 숫자
  `10.` 이나 `1.` 같은 포맷을 사용하지 않는다.

* 1.7.3 null
  undefined와 다르다. null 값은 다음과 같이 한정된 곳에서만 사용
    * 나중에 값을 할당할 변수를 초기화할 때
    * 선언한 변수에 값이 할당되었는지 비교할 떄
    * 인자 값으로 객체를 넘기는 함수를 호출할 때
    * 함수를 호출한 곳에서 반환값으로 객체를 기대할 때
  사용하면 안되는 경우
    * 함수의 인자 값을 확인하기 위해 null로 비교해서는 안된다.
    * 초기화되지 않은 변수를 null로 비교해서는 안된다.

* 1.7.4 undefined
  초기화되지 않은 변수는 초기 값으로 undefinde를 갖는다.
  `var person = null;` 과 같이 변수를 선언하면 변수가 선언되지 않았을 때만 typeof 연산자가 "undefined"를 반환한다고 생각할 수 있다.

* 1.7.5 객체 리터럴
  ```
  // 권장하지 않음
  var book = new Object();
  book.title = "Maintainable JavaScript";
  book.author = "Nicholas C. Zakas";
  ```
  ```
  // 권장하는 방법
  var book = {
    title: "Maintainable JavaScript",
    author : "Nicholas C. Zakas"
  };
  ```

* 1.7.6 배열 리터럴
  ```
  // 권장하지 않음
  var colors = new Array("red", "green", "blue");
  var numbers = new Array(1, 2, 3, 4);
  ```
  Array 생성자를 사용하는 것은 권장하지 않는다.
  ```
  // 권장
  var colors = ["red", "green", "blue"];
  var numbers = [1, 2, 3, 4];
  ```

